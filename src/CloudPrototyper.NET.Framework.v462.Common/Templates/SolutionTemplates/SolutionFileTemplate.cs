//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:5.0.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CloudPrototyper.NET.Framework.v462.Common.Templates.SolutionTemplates {
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    
    public partial class SolutionFileTemplate : SolutionFileTemplateBase {
        
        
        private CloudPrototyper.NET.Framework.v462.Common.Generators.SolutionGenerators.SolutionFileGenerator _ModelField;
        
        public CloudPrototyper.NET.Framework.v462.Common.Generators.SolutionGenerators.SolutionFileGenerator Model {
            get {
                return this._ModelField;
            }
        }

        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 7 "Templates\SolutionTemplates\SolutionFileTemplate.tt"
            this.Write("Microsoft Visual Studio Solution File, Format Version 12.00\r\n# Visual Studio 14\r\n" +
                    "VisualStudioVersion = 14.0.25420.1\r\nMinimumVisualStudioVersion = 10.0.40219.1\r\n");
            
            #line default
            #line hidden
            
            #line 11 "Templates\SolutionTemplates\SolutionFileTemplate.tt"
foreach(var assembly in Model.Assemblies) {
            
            #line default
            #line hidden
            
            #line 12 "Templates\SolutionTemplates\SolutionFileTemplate.tt"
            this.Write("Project(\"{");
            
            #line default
            #line hidden
            
            #line 12 "Templates\SolutionTemplates\SolutionFileTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(assembly.AssemblyInfo.ProjectType.ToString().ToUpper()));
            
            #line default
            #line hidden
            
            #line 12 "Templates\SolutionTemplates\SolutionFileTemplate.tt"
            this.Write("}\") = \"");
            
            #line default
            #line hidden
            
            #line 12 "Templates\SolutionTemplates\SolutionFileTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(assembly.AssemblyInfo.Name));
            
            #line default
            #line hidden
            
            #line 12 "Templates\SolutionTemplates\SolutionFileTemplate.tt"
            this.Write("\", \"");
            
            #line default
            #line hidden
            
            #line 12 "Templates\SolutionTemplates\SolutionFileTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(assembly.AssemblyInfo.ProjectFileRelativePath));
            
            #line default
            #line hidden
            
            #line 12 "Templates\SolutionTemplates\SolutionFileTemplate.tt"
            this.Write("\\\\");
            
            #line default
            #line hidden
            
            #line 12 "Templates\SolutionTemplates\SolutionFileTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(assembly.AssemblyInfo.Name));
            
            #line default
            #line hidden
            
            #line 12 "Templates\SolutionTemplates\SolutionFileTemplate.tt"
            this.Write(".csproj\", \"{");
            
            #line default
            #line hidden
            
            #line 12 "Templates\SolutionTemplates\SolutionFileTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(assembly.AssemblyInfo.UniqueProjectId.ToString().ToUpper()));
            
            #line default
            #line hidden
            
            #line 12 "Templates\SolutionTemplates\SolutionFileTemplate.tt"
            this.Write("}\" \r\nEndProject\r\n");
            
            #line default
            #line hidden
            
            #line 14 "Templates\SolutionTemplates\SolutionFileTemplate.tt"
}
            
            #line default
            #line hidden
            
            #line 15 "Templates\SolutionTemplates\SolutionFileTemplate.tt"
            this.Write("Global\r\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\r\n\t\tDebug|Any" +
                    " CPU = Debug|Any CPU\r\n\t\tRelease|Any CPU = Release|Any CPU\r\n\tEndGlobalSection\r\n\tG" +
                    "lobalSection(ProjectConfigurationPlatforms) = postSolution\r\n");
            
            #line default
            #line hidden
            
            #line 21 "Templates\SolutionTemplates\SolutionFileTemplate.tt"
foreach(var assembly in Model.Assemblies) {
            
            #line default
            #line hidden
            
            #line 22 "Templates\SolutionTemplates\SolutionFileTemplate.tt"
            this.Write("\t\t{");
            
            #line default
            #line hidden
            
            #line 22 "Templates\SolutionTemplates\SolutionFileTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(assembly.AssemblyInfo.UniqueProjectId.ToString().ToUpper()));
            
            #line default
            #line hidden
            
            #line 22 "Templates\SolutionTemplates\SolutionFileTemplate.tt"
            this.Write("}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{");
            
            #line default
            #line hidden
            
            #line 23 "Templates\SolutionTemplates\SolutionFileTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(assembly.AssemblyInfo.UniqueProjectId.ToString().ToUpper()));
            
            #line default
            #line hidden
            
            #line 23 "Templates\SolutionTemplates\SolutionFileTemplate.tt"
            this.Write("}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{");
            
            #line default
            #line hidden
            
            #line 24 "Templates\SolutionTemplates\SolutionFileTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(assembly.AssemblyInfo.UniqueProjectId.ToString().ToUpper()));
            
            #line default
            #line hidden
            
            #line 24 "Templates\SolutionTemplates\SolutionFileTemplate.tt"
            this.Write("}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{");
            
            #line default
            #line hidden
            
            #line 25 "Templates\SolutionTemplates\SolutionFileTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(assembly.AssemblyInfo.UniqueProjectId.ToString().ToUpper()));
            
            #line default
            #line hidden
            
            #line 25 "Templates\SolutionTemplates\SolutionFileTemplate.tt"
            this.Write("}.Release|Any CPU.Build.0 = Release|Any CPU\r\n");
            
            #line default
            #line hidden
            
            #line 26 "Templates\SolutionTemplates\SolutionFileTemplate.tt"
}
            
            #line default
            #line hidden
            
            #line 27 "Templates\SolutionTemplates\SolutionFileTemplate.tt"
            this.Write("\tEndGlobalSection\r\n\tGlobalSection(SolutionProperties) = preSolution\r\n\t\tHideSoluti" +
                    "onNode = FALSE\r\n\tEndGlobalSection\r\nEndGlobal");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
            if ((this.Errors.HasErrors == false)) {
                if (((this.Session != null) 
                            && this.Session.ContainsKey("Model"))) {
                    object data = this.Session["Model"];
                    if (typeof(CloudPrototyper.NET.Framework.v462.Common.Generators.SolutionGenerators.SolutionFileGenerator).IsAssignableFrom(data.GetType())) {
                        this._ModelField = ((CloudPrototyper.NET.Framework.v462.Common.Generators.SolutionGenerators.SolutionFileGenerator)(data));
                    }
                    else {
                        this.Error("The type \'CloudPrototyper.NET.Framework.v462.Common.Generators.SolutionGenerators" +
                                ".SolutionFileGenerator\' of the parameter \'Model\' did not match the type passed t" +
                                "o the template");
                    }
                }
            }

        }
    }
    
    public class SolutionFileTemplateBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
