//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:5.0.9
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CloudPrototyper.NET.Framework.v462.Common.Templates.SolutionTemplates.Assemblies {
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System.IO;
    using System;
    
    
    public partial class WebApiAssemblyTemplate : WebApiAssemblyTemplateBase {
        
        
        private CloudPrototyper.NET.Framework.v462.Common.Generators.SolutionGenerators.AssemblyFiles.WebApiAssemblyFileGenerator _ModelField;
        
        public CloudPrototyper.NET.Framework.v462.Common.Generators.SolutionGenerators.AssemblyFiles.WebApiAssemblyFileGenerator Model {
            get {
                return this._ModelField;
            }
        }

        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 8 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write("<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Project Sdk=\"Microsoft.NET.Sdk\">  \r\n\r\n  " +
                    "<PropertyGroup>\r\n    <Configuration Condition=\" \'$(Configuration)\' == \'\' \">Debug" +
                    "</Configuration>\r\n    <Platform Condition=\" \'$(Platform)\' == \'\' \">AnyCPU</Platfo" +
                    "rm>\r\n    <TargetFramework>net462</TargetFramework>\r\n    <UseIISExpress>true</Use" +
                    "IISExpress>\r\n    <IISExpressSSLPort />\r\n    <IISExpressAnonymousAuthentication /" +
                    ">\r\n    <IISExpressWindowsAuthentication />\r\n    <IISExpressUseClassicPipelineMod" +
                    "e />\r\n    <UseGlobalApplicationHostFile />\r\n    <NuGetPackageImportStamp>\r\n    <" +
                    "/NuGetPackageImportStamp>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\" \'$(C" +
                    "onfiguration)|$(Platform)\' == \'Debug|AnyCPU\' \">\r\n    <DebugSymbols>true</DebugSy" +
                    "mbols>\r\n    <DebugType>full</DebugType>\r\n    <Optimize>false</Optimize>\r\n    <Ou" +
                    "tputPath>bin\\</OutputPath>\r\n    <DefineConstants>DEBUG;TRACE</DefineConstants>\r\n" +
                    "    <ErrorReport>prompt</ErrorReport>\r\n    <WarningLevel>4</WarningLevel>\r\n    <" +
                    "AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>\r\n   " +
                    " <AppendRuntimeIdentifierToOutputPath>false</AppendRuntimeIdentifierToOutputPath" +
                    ">\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\" \'$(Configuration)|$(Platform" +
                    ")\' == \'Release|AnyCPU\' \">\r\n    <DebugType>pdbonly</DebugType>\r\n    <Optimize>tru" +
                    "e</Optimize>\r\n    <OutputPath>bin\\</OutputPath>\r\n    <DefineConstants>TRACE</Def" +
                    "ineConstants>\r\n    <ErrorReport>prompt</ErrorReport>\r\n    <WarningLevel>4</Warni" +
                    "ngLevel>\r\n    <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToO" +
                    "utputPath>\r\n    <AppendRuntimeIdentifierToOutputPath>false</AppendRuntimeIdentif" +
                    "ierToOutputPath>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <ProjectCapability Incl" +
                    "ude=\"DotNetCoreWeb\" />\r\n    <ProjectCapability Include=\"SupportsSystemWeb\" />\r\n " +
                    " </ItemGroup>\r\n  <ItemGroup>\r\n    <Reference Include=\"Microsoft.CSharp\" />\r\n    " +
                    "<Reference Include=\"System.Net.Http\" />\r\n    <Reference Include=\"System.Web.Dyna" +
                    "micData\" />\r\n    <Reference Include=\"System.Web.Entity\" />\r\n    <Reference Inclu" +
                    "de=\"System.Web.ApplicationServices\" />\r\n\t<Reference Include=\"System.Runtime.Seri" +
                    "alization\" />\r\n    <Reference Include=\"System.ComponentModel.DataAnnotations\" />" +
                    "\r\n    <Reference Include=\"System\" />\r\n    <Reference Include=\"System.Data\" />\r\n " +
                    "   <Reference Include=\"System.Core\" />\r\n    <Reference Include=\"System.Data.Data" +
                    "SetExtensions\" />\r\n    <Reference Include=\"System.Web.Extensions\" />\r\n    <Refer" +
                    "ence Include=\"System.Xml.Linq\" />\r\n    <Reference Include=\"System.Drawing\" />\r\n " +
                    "   <Reference Include=\"System.Web\" />\r\n    <Reference Include=\"System.Xml\" />\r\n " +
                    "   <Reference Include=\"System.Configuration\" />\r\n    <Reference Include=\"System." +
                    "Web.Services\" />\r\n    <Reference Include=\"System.EnterpriseServices\" />\r\n  </Ite" +
                    "mGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.CodeDom.Provide" +
                    "rs.DotNetCompilerPlatform\" version=\"1.0.5\" />\r\n    <PackageReference Include=\"Mi" +
                    "crosoft.CSharp\" Version=\"4.4.1\" />\r\n    <PackageReference Include=\"Newtonsoft.Js" +
                    "on\">\r\n      <Version>11.0.2</Version>\r\n    </PackageReference>\t\r\n    <PackageRef" +
                    "erence Include=\"Microsoft.AspNet.WebApi\">\r\n      <Version>5.2.7</Version>\r\n    <" +
                    "/PackageReference>\t\r\n    <PackageReference Include=\"Microsoft.AspNet.WebApi.Clie" +
                    "nt\">\r\n      <Version>5.2.7</Version>\r\n    </PackageReference>\r\n    <PackageRefer" +
                    "ence Include=\"Microsoft.AspNet.WebApi.Core\">\r\n      <Version>5.2.7</Version>\r\n  " +
                    "  </PackageReference>\r\n    <PackageReference Include=\"Microsoft.AspNet.WebApi.We" +
                    "bHost\">\r\n      <Version>5.2.7</Version>\r\n    </PackageReference>\r\n");
            
            #line default
            #line hidden
            
            #line 88 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
 foreach(var reference in Model.AssemblyInfo.Packages) {
            
            #line default
            #line hidden
            
            #line 89 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write("    <PackageReference Include=\"");
            
            #line default
            #line hidden
            
            #line 89 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( reference.Id ));
            
            #line default
            #line hidden
            
            #line 89 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write("\">\r\n      <Version>");
            
            #line default
            #line hidden
            
            #line 90 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( reference.Version ));
            
            #line default
            #line hidden
            
            #line 90 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write("</Version>\r\n    </PackageReference>\t\r\n");
            
            #line default
            #line hidden
            
            #line 92 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 93 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write("  </ItemGroup>\r\n<ItemGroup>\r\n");
            
            #line default
            #line hidden
            
            #line 95 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
 foreach(var import in Model.AssemblyInfo.AssemblyImports) {
            
            #line default
            #line hidden
            
            #line 96 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write("\t<ProjectReference Include=\"..\\\\");
            
            #line default
            #line hidden
            
            #line 96 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Path.Combine(import.AssemblyInfo.ProjectFileRelativePath, import.AssemblyInfo.Name) ));
            
            #line default
            #line hidden
            
            #line 96 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write(".csproj\">\r\n    </ProjectReference>\r\n");
            
            #line default
            #line hidden
            
            #line 98 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 99 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write("  </ItemGroup>\r\n  <ItemGroup>\r\n");
            
            #line default
            #line hidden
            
            #line 101 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
 foreach(var include in Model.AssemblyInfo.IncludeOnlys)  {
            
            #line default
            #line hidden
            
            #line 102 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write("    <Content Include=\"");
            
            #line default
            #line hidden
            
            #line 102 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( include ));
            
            #line default
            #line hidden
            
            #line 102 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write("\" />\r\n");
            
            #line default
            #line hidden
            
            #line 103 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 104 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
 foreach(var content in Model.AssemblyInfo.Contents) { 
            
            #line default
            #line hidden
            
            #line 105 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write("    <Content Include=\"..\\\\");
            
            #line default
            #line hidden
            
            #line 105 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( content.OutputPath ));
            
            #line default
            #line hidden
            
            #line 105 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write("\">\r\n      <CopyToOutputDirectory>Always</CopyToOutputDirectory>\r\n    </Content>\r\n" +
                    "");
            
            #line default
            #line hidden
            
            #line 108 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 109 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write("</ItemGroup>\r\n  <ItemGroup>\r\n    <Content Include=\"Global.asax\">\r\n      <CopyToOu" +
                    "tputDirectory>Always</CopyToOutputDirectory>\r\n\t</Content>\r\n    <Content Include=" +
                    "\"Web.config\" >\r\n      <CopyToOutputDirectory>Always</CopyToOutputDirectory>\r\n\t</" +
                    "Content>\r\n  </ItemGroup>\r\n  \r\n  <ItemGroup>\r\n    <None Include=\"Web.Debug.config" +
                    "\">\r\n      <DependentUpon>Web.config</DependentUpon>\r\n    </None>\r\n    <None Incl" +
                    "ude=\"Web.Release.config\">\r\n      <DependentUpon>Web.config</DependentUpon>\r\n    " +
                    "</None>\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <Folder Include=\"App_Data\\\" />\r\n  </" +
                    "ItemGroup>\r\n  <PropertyGroup>\r\n    <VisualStudioVersion Condition=\"\'$(VisualStud" +
                    "ioVersion)\' == \'\'\">10.0</VisualStudioVersion>\r\n    <VSToolsPath Condition=\"\'$(VS" +
                    "ToolsPath)\' == \'\'\">$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualSt" +
                    "udioVersion)</VSToolsPath>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <AutoGene" +
                    "rateBindingRedirects>true</AutoGenerateBindingRedirects>\r\n    <GenerateBindingRe" +
                    "directsOutputType>true</GenerateBindingRedirectsOutputType>\r\n  </PropertyGroup>\r" +
                    "\n  <ProjectExtensions>\r\n    <VisualStudio>\r\n      <FlavorProperties GUID=\"{349c5" +
                    "851-65df-11da-9384-00065b846f21}\">\r\n        <WebProjectProperties>\r\n          <U" +
                    "seIIS>True</UseIIS>\r\n          <AutoAssignPort>True</AutoAssignPort>\r\n          " +
                    "<DevelopmentServerPort>62524</DevelopmentServerPort>\r\n          <DevelopmentServ" +
                    "erVPath>/</DevelopmentServerVPath>\r\n          <IISUrl>http://localhost:62524/</I" +
                    "ISUrl>\r\n          <NTLMAuthentication>False</NTLMAuthentication>\r\n          <Use" +
                    "CustomServer>False</UseCustomServer>\r\n          <CustomServerUrl>\r\n          </C" +
                    "ustomServerUrl>\r\n          <SaveServerSettingsInUserFile>False</SaveServerSettin" +
                    "gsInUserFile>\r\n        </WebProjectProperties>\r\n      </FlavorProperties>\r\n    <" +
                    "/VisualStudio>\r\n  </ProjectExtensions>  \r\n</Project>");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
            if ((this.Errors.HasErrors == false)) {
                if (((this.Session != null) 
                            && this.Session.ContainsKey("Model"))) {
                    object data = this.Session["Model"];
                    if (typeof(CloudPrototyper.NET.Framework.v462.Common.Generators.SolutionGenerators.AssemblyFiles.WebApiAssemblyFileGenerator).IsAssignableFrom(data.GetType())) {
                        this._ModelField = ((CloudPrototyper.NET.Framework.v462.Common.Generators.SolutionGenerators.AssemblyFiles.WebApiAssemblyFileGenerator)(data));
                    }
                    else {
                        this.Error("The type \'CloudPrototyper.NET.Framework.v462.Common.Generators.SolutionGenerators" +
                                ".AssemblyFiles.WebApiAssemblyFileGenerator\' of the parameter \'Model\' did not mat" +
                                "ch the type passed to the template");
                    }
                }
            }

        }
    }
    
    public class WebApiAssemblyTemplateBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
