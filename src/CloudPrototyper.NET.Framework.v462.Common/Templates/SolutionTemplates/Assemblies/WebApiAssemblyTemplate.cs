//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:5.0.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CloudPrototyper.NET.Framework.v462.Common.Templates.SolutionTemplates.Assemblies {
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System.IO;
    using System;
    
    
    public partial class WebApiAssemblyTemplate : WebApiAssemblyTemplateBase {
        
        
        private CloudPrototyper.NET.Framework.v462.Common.Generators.SolutionGenerators.AssemblyFiles.WebApiAssemblyFileGenerator _ModelField;
        
        public CloudPrototyper.NET.Framework.v462.Common.Generators.SolutionGenerators.AssemblyFiles.WebApiAssemblyFileGenerator Model {
            get {
                return this._ModelField;
            }
        }

        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 8 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write(@"<?xml version=""1.0"" encoding=""utf-8""?>
<Project ToolsVersion=""12.0"" DefaultTargets=""Build"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">

  <Import Project=""..\packages\MSBuild.Microsoft.VisualStudio.Web.targets.14.0.0.3\build\MSBuild.Microsoft.VisualStudio.Web.targets.props"" Condition=""Exists('..\packages\MSBuild.Microsoft.VisualStudio.Web.targets.14.0.0.3\build\MSBuild.Microsoft.VisualStudio.Web.targets.props')"" />
  <Import Project=""..\packages\Microsoft.CodeDom.Providers.DotNetCompilerPlatform.1.0.0\build\Microsoft.CodeDom.Providers.DotNetCompilerPlatform.props"" Condition=""Exists('..\packages\Microsoft.CodeDom.Providers.DotNetCompilerPlatform.1.0.0\build\Microsoft.CodeDom.Providers.DotNetCompilerPlatform.props')"" />
  <Import Project=""..\packages\Microsoft.Net.Compilers.1.0.0\build\Microsoft.Net.Compilers.props"" Condition=""Exists('..\packages\Microsoft.Net.Compilers.1.0.0\build\Microsoft.Net.Compilers.props')"" />
  <Import Project=""$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props"" Condition=""Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')"" />
  <PropertyGroup>
    <Configuration Condition="" '$(Configuration)' == '' "">Debug</Configuration>
    <Platform Condition="" '$(Platform)' == '' "">AnyCPU</Platform>
    <ProductVersion>
    </ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{");
            
            #line default
            #line hidden
            
            #line 21 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Model.AssemblyInfo.UniqueProjectId.ToString().ToUpper() ));
            
            #line default
            #line hidden
            
            #line 21 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write("}</ProjectGuid>\r\n    <ProjectTypeGuids>{349c5851-65df-11da-9384-00065b846f21};{fa" +
                    "e04ec0-301f-11d3-bf4b-00c04f79efbc}</ProjectTypeGuids>\r\n    <OutputType>Library<" +
                    "/OutputType>\r\n    <AppDesignerFolder>Properties</AppDesignerFolder>\r\n    <RootNa" +
                    "mespace>");
            
            #line default
            #line hidden
            
            #line 25 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Model.AssemblyInfo.Name ));
            
            #line default
            #line hidden
            
            #line 25 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write("</RootNamespace>\r\n    <AssemblyName>");
            
            #line default
            #line hidden
            
            #line 26 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Model.AssemblyInfo.Name ));
            
            #line default
            #line hidden
            
            #line 26 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write("</AssemblyName>\r\n    <TargetFrameworkVersion>v4.6.2</TargetFrameworkVersion>\r\n   " +
                    " <UseIISExpress>true</UseIISExpress>\r\n    <IISExpressSSLPort />\r\n    <IISExpress" +
                    "AnonymousAuthentication />\r\n    <IISExpressWindowsAuthentication />\r\n    <IISExp" +
                    "ressUseClassicPipelineMode />\r\n    <UseGlobalApplicationHostFile />\r\n    <NuGetP" +
                    "ackageImportStamp>\r\n    </NuGetPackageImportStamp>\r\n  </PropertyGroup>\r\n  <Prope" +
                    "rtyGroup Condition=\" \'$(Configuration)|$(Platform)\' == \'Debug|AnyCPU\' \">\r\n    <D" +
                    "ebugSymbols>true</DebugSymbols>\r\n    <DebugType>full</DebugType>\r\n    <Optimize>" +
                    "false</Optimize>\r\n    <OutputPath>bin\\</OutputPath>\r\n    <DefineConstants>DEBUG;" +
                    "TRACE</DefineConstants>\r\n    <ErrorReport>prompt</ErrorReport>\r\n    <WarningLeve" +
                    "l>4</WarningLevel>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\" \'$(Configur" +
                    "ation)|$(Platform)\' == \'Release|AnyCPU\' \">\r\n    <DebugType>pdbonly</DebugType>\r\n" +
                    "    <Optimize>true</Optimize>\r\n    <OutputPath>bin\\</OutputPath>\r\n    <DefineCon" +
                    "stants>TRACE</DefineConstants>\r\n    <ErrorReport>prompt</ErrorReport>\r\n    <Warn" +
                    "ingLevel>4</WarningLevel>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Reference Inc" +
                    "lude=\"Microsoft.CodeDom.Providers.DotNetCompilerPlatform, Version=1.0.0.0, Cultu" +
                    "re=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL\">\r\n     " +
                    " <HintPath>..\\packages\\Microsoft.CodeDom.Providers.DotNetCompilerPlatform.1.0.0\\" +
                    "lib\\net45\\Microsoft.CodeDom.Providers.DotNetCompilerPlatform.dll</HintPath>\r\n   " +
                    "   <Private>True</Private>\r\n    </Reference>\r\n    <Reference Include=\"Microsoft." +
                    "CSharp\" />\r\n    <Reference Include=\"System.Net.Http\" />\r\n    <Reference Include=" +
                    "\"System.Web.DynamicData\" />\r\n    <Reference Include=\"System.Web.Entity\" />\r\n    " +
                    "<Reference Include=\"System.Web.ApplicationServices\" />\r\n\t<Reference Include=\"Sys" +
                    "tem.Runtime.Serialization\" />\r\n    <Reference Include=\"System.ComponentModel.Dat" +
                    "aAnnotations\" />\r\n    <Reference Include=\"System\" />\r\n    <Reference Include=\"Sy" +
                    "stem.Data\" />\r\n    <Reference Include=\"System.Core\" />\r\n    <Reference Include=\"" +
                    "System.Data.DataSetExtensions\" />\r\n    <Reference Include=\"System.Web.Extensions" +
                    "\" />\r\n    <Reference Include=\"System.Xml.Linq\" />\r\n    <Reference Include=\"Syste" +
                    "m.Drawing\" />\r\n    <Reference Include=\"System.Web\" />\r\n    <Reference Include=\"S" +
                    "ystem.Xml\" />\r\n    <Reference Include=\"System.Configuration\" />\r\n    <Reference " +
                    "Include=\"System.Web.Services\" />\r\n    <Reference Include=\"System.EnterpriseServi" +
                    "ces\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <Reference Include=\"Newtonsoft.Json\"" +
                    ">\r\n      <HintPath>..\\packages\\Newtonsoft.Json.6.0.4\\lib\\net45\\Newtonsoft.Json.d" +
                    "ll</HintPath>\r\n    </Reference>\r\n    <Reference Include=\"System.Net.Http.Formatt" +
                    "ing\">\r\n      <HintPath>..\\packages\\Microsoft.AspNet.WebApi.Client.5.2.3\\lib\\net4" +
                    "5\\System.Net.Http.Formatting.dll</HintPath>\r\n    </Reference>\r\n    <Reference In" +
                    "clude=\"System.Web.Http\">\r\n      <HintPath>..\\packages\\Microsoft.AspNet.WebApi.Co" +
                    "re.5.2.3\\lib\\net45\\System.Web.Http.dll</HintPath>\r\n    </Reference>\r\n    <Refere" +
                    "nce Include=\"System.Web.Http.WebHost\">\r\n      <HintPath>..\\packages\\Microsoft.As" +
                    "pNet.WebApi.WebHost.5.2.3\\lib\\net45\\System.Web.Http.WebHost.dll</HintPath>\r\n    " +
                    "</Reference>\r\n");
            
            #line default
            #line hidden
            
            #line 92 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
 foreach(var reference in Model.AssemblyInfo.Packages) {
            
            #line default
            #line hidden
            
            #line 93 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
 foreach(var package in reference.IncludeHintPathTuples) {
            
            #line default
            #line hidden
            
            #line 94 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write("\t<Reference Include=\"");
            
            #line default
            #line hidden
            
            #line 94 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( package.Item1 ));
            
            #line default
            #line hidden
            
            #line 94 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write("\">\r\n");
            
            #line default
            #line hidden
            
            #line 95 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
 if(!string.IsNullOrEmpty(package.Item2)) { 
            
            #line default
            #line hidden
            
            #line 96 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write("\t\t\t <HintPath>");
            
            #line default
            #line hidden
            
            #line 96 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( package.Item2 ));
            
            #line default
            #line hidden
            
            #line 96 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write("</HintPath>\r\n");
            
            #line default
            #line hidden
            
            #line 97 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 98 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write("    </Reference>\r\n");
            
            #line default
            #line hidden
            
            #line 99 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 100 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 101 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write("  </ItemGroup>\r\n<ItemGroup>\r\n");
            
            #line default
            #line hidden
            
            #line 103 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
 foreach(var import in Model.AssemblyInfo.AssemblyImports) {
            
            #line default
            #line hidden
            
            #line 104 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write("\t<ProjectReference Include=\"..\\\\");
            
            #line default
            #line hidden
            
            #line 104 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Path.Combine(import.AssemblyInfo.ProjectFileRelativePath, import.AssemblyInfo.Name) ));
            
            #line default
            #line hidden
            
            #line 104 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write(".csproj\">\r\n      <Project>{");
            
            #line default
            #line hidden
            
            #line 105 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(  import.AssemblyInfo.UniqueProjectId.ToString().ToUpper() ));
            
            #line default
            #line hidden
            
            #line 105 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write("}</Project>\r\n      <Name>");
            
            #line default
            #line hidden
            
            #line 106 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( import.AssemblyInfo.Name ));
            
            #line default
            #line hidden
            
            #line 106 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write("</Name>\r\n    </ProjectReference>\r\n");
            
            #line default
            #line hidden
            
            #line 108 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 109 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write("  </ItemGroup>\r\n  <ItemGroup>\r\n");
            
            #line default
            #line hidden
            
            #line 111 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
 foreach(var include in Model.AssemblyInfo.IncludeOnlys)  {
            
            #line default
            #line hidden
            
            #line 112 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write("    <Content Include=\"");
            
            #line default
            #line hidden
            
            #line 112 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( include ));
            
            #line default
            #line hidden
            
            #line 112 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write("\" />\r\n");
            
            #line default
            #line hidden
            
            #line 113 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 114 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
 foreach(var content in Model.AssemblyInfo.Contents) { 
            
            #line default
            #line hidden
            
            #line 115 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write("    <Content Include=\"..\\\\");
            
            #line default
            #line hidden
            
            #line 115 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( content.OutputPath ));
            
            #line default
            #line hidden
            
            #line 115 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write("\">\r\n      <CopyToOutputDirectory>Always</CopyToOutputDirectory>\r\n    </Content>\r\n" +
                    "");
            
            #line default
            #line hidden
            
            #line 118 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 119 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write(@"</ItemGroup>
  <ItemGroup>
    <Content Include=""Global.asax"">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
	</Content>
    <Content Include=""Web.config"" >
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
	</Content>
  </ItemGroup>
  <ItemGroup>
    <Compile Include=""App_Start\WebApiConfig.cs"" />
    <Compile Include=""Global.asax.cs"">
      <DependentUpon>Global.asax</DependentUpon>
    </Compile>
");
            
            #line default
            #line hidden
            
            #line 133 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
 foreach(var file in Model.AssemblyInfo.FilesToCompile) { if(!(file.GenerationInfo.FileName.EndsWith(@"WebApiConfig.cs") || file.GenerationInfo.FileName.EndsWith(".config")|| file.GenerationInfo.FileName.Contains(".asax"))) {
            
            #line default
            #line hidden
            
            #line 134 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write("\t\t<compile Include=\"");
            
            #line default
            #line hidden
            
            #line 134 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Path.Combine(file.GenerationInfo.RelativePathFolder.Substring(Model.AssemblyInfo.ProjectFileRelativePath.Length,file.GenerationInfo.RelativePathFolder.Length-Model.AssemblyInfo.ProjectFileRelativePath.Length).TrimStart('\\'), file.GenerationInfo.FileName)));
            
            #line default
            #line hidden
            
            #line 134 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write("\"/>\r\n");
            
            #line default
            #line hidden
            
            #line 135 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
 }} 
            
            #line default
            #line hidden
            
            #line 136 "Templates\SolutionTemplates\Assemblies\WebApiAssemblyTemplate.tt"
            this.Write("  </ItemGroup>\r\n  <ItemGroup>\r\n    <Content Include=\"packages.config\" >\r\n\t <CopyT" +
                    "oOutputDirectory>Always</CopyToOutputDirectory>\r\n    </Content>\r\n    <None Inclu" +
                    "de=\"Web.Debug.config\">\r\n      <DependentUpon>Web.config</DependentUpon>\r\n    </N" +
                    "one>\r\n    <None Include=\"Web.Release.config\">\r\n      <DependentUpon>Web.config</" +
                    "DependentUpon>\r\n    </None>\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <Folder Include=" +
                    "\"App_Data\\\" />\r\n  </ItemGroup>\r\n  <PropertyGroup>\r\n    <VisualStudioVersion Cond" +
                    "ition=\"\'$(VisualStudioVersion)\' == \'\'\">10.0</VisualStudioVersion>\r\n    <VSToolsP" +
                    "ath Condition=\"\'$(VSToolsPath)\' == \'\'\">$(MSBuildExtensionsPath32)\\Microsoft\\Visu" +
                    "alStudio\\v$(VisualStudioVersion)</VSToolsPath>\r\n  </PropertyGroup>\r\n  <Import Pr" +
                    "oject=\"$(MSBuildBinPath)\\Microsoft.CSharp.targets\" />\r\n  <Import Project=\"$(VSTo" +
                    "olsPath)\\WebApplications\\Microsoft.WebApplication.targets\" Condition=\"\'$(VSTools" +
                    "Path)\' != \'\'\" />\r\n  <Import Project=\"..\\packages\\MSBuild.Microsoft.VisualStudio." +
                    "Web.targets.14.0.0.3\\tools\\VSToolsPath\\WebApplications\\Microsoft.WebApplication." +
                    "targets\" Condition=\"true\" />\r\n  <ProjectExtensions>\r\n    <VisualStudio>\r\n      <" +
                    "FlavorProperties GUID=\"{349c5851-65df-11da-9384-00065b846f21}\">\r\n        <WebPro" +
                    "jectProperties>\r\n          <UseIIS>True</UseIIS>\r\n          <AutoAssignPort>True" +
                    "</AutoAssignPort>\r\n          <DevelopmentServerPort>62524</DevelopmentServerPort" +
                    ">\r\n          <DevelopmentServerVPath>/</DevelopmentServerVPath>\r\n          <IISU" +
                    "rl>http://localhost:62524/</IISUrl>\r\n          <NTLMAuthentication>False</NTLMAu" +
                    "thentication>\r\n          <UseCustomServer>False</UseCustomServer>\r\n          <Cu" +
                    "stomServerUrl>\r\n          </CustomServerUrl>\r\n          <SaveServerSettingsInUse" +
                    "rFile>False</SaveServerSettingsInUserFile>\r\n        </WebProjectProperties>\r\n   " +
                    "   </FlavorProperties>\r\n    </VisualStudio>\r\n  </ProjectExtensions>\r\n  <Target N" +
                    "ame=\"EnsureNuGetPackageBuildImports\" BeforeTargets=\"PrepareForBuild\">\r\n    <Prop" +
                    "ertyGroup>\r\n      <ErrorText>This project references NuGet package(s) that are m" +
                    "issing on this computer. Use NuGet Package Restore to download them.  For more i" +
                    "nformation, see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file " +
                    "is {0}.</ErrorText>\r\n    </PropertyGroup>\r\n    <Error Condition=\"!Exists(\'..\\pac" +
                    "kages\\Microsoft.Net.Compilers.1.0.0\\build\\Microsoft.Net.Compilers.props\')\" Text=" +
                    "\"$([System.String]::Format(\'$(ErrorText)\', \'..\\packages\\Microsoft.Net.Compilers." +
                    "1.0.0\\build\\Microsoft.Net.Compilers.props\'))\" />\r\n    <Error Condition=\"!Exists(" +
                    "\'..\\packages\\Microsoft.CodeDom.Providers.DotNetCompilerPlatform.1.0.0\\build\\Micr" +
                    "osoft.CodeDom.Providers.DotNetCompilerPlatform.props\')\" Text=\"$([System.String]:" +
                    ":Format(\'$(ErrorText)\', \'..\\packages\\Microsoft.CodeDom.Providers.DotNetCompilerP" +
                    "latform.1.0.0\\build\\Microsoft.CodeDom.Providers.DotNetCompilerPlatform.props\'))\"" +
                    " />\r\n    <Error Condition=\"!Exists(\'..\\packages\\MSBuild.Microsoft.VisualStudio.W" +
                    "eb.targets.14.0.0.3\\build\\MSBuild.Microsoft.VisualStudio.Web.targets.props\')\" Te" +
                    "xt=\"$([System.String]::Format(\'$(ErrorText)\', \'..\\packages\\MSBuild.Microsoft.Vis" +
                    "ualStudio.Web.targets.14.0.0.3\\build\\MSBuild.Microsoft.VisualStudio.Web.targets." +
                    "props\'))\" />\r\n  </Target>\r\n  <!-- To modify your build process, add your task in" +
                    "side one of the targets below and uncomment it. \r\n       Other similar extension" +
                    " points exist, see Microsoft.Common.targets.\r\n  <Target Name=\"BeforeBuild\">\r\n  <" +
                    "/Target>\r\n  <Target Name=\"AfterBuild\">\r\n  </Target>\r\n  -->\r\n</Project>");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
            if ((this.Errors.HasErrors == false)) {
                if (((this.Session != null) 
                            && this.Session.ContainsKey("Model"))) {
                    object data = this.Session["Model"];
                    if (typeof(CloudPrototyper.NET.Framework.v462.Common.Generators.SolutionGenerators.AssemblyFiles.WebApiAssemblyFileGenerator).IsAssignableFrom(data.GetType())) {
                        this._ModelField = ((CloudPrototyper.NET.Framework.v462.Common.Generators.SolutionGenerators.AssemblyFiles.WebApiAssemblyFileGenerator)(data));
                    }
                    else {
                        this.Error("The type \'CloudPrototyper.NET.Framework.v462.Common.Generators.SolutionGenerators" +
                                ".AssemblyFiles.WebApiAssemblyFileGenerator\' of the parameter \'Model\' did not mat" +
                                "ch the type passed to the template");
                    }
                }
            }

        }
    }
    
    public class WebApiAssemblyTemplateBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
