//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:5.0.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CloudPrototyper.NET.Framework.v462.Common.Templates.SolutionTemplates.Assemblies {
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System.IO;
    using System;
    
    
    public partial class LibraryAssemblyTemplate : LibraryAssemblyTemplateBase {
        
        
        private CloudPrototyper.NET.Framework.v462.Common.Generators.SolutionGenerators.AssemblyFiles.LibraryAssemblyFileGenerator _ModelField;
        
        public CloudPrototyper.NET.Framework.v462.Common.Generators.SolutionGenerators.AssemblyFiles.LibraryAssemblyFileGenerator Model {
            get {
                return this._ModelField;
            }
        }

        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 8 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
            this.Write(@"<?xml version=""1.0"" encoding=""utf-8""?>
<Project ToolsVersion=""14.0"" DefaultTargets=""Build"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
  <Import Project=""$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props"" Condition=""Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')"" />
  <PropertyGroup>
    <Configuration Condition="" '$(Configuration)' == '' "">Debug</Configuration>
    <Platform Condition="" '$(Platform)' == '' "">AnyCPU</Platform>
    <ProjectGuid>{");
            
            #line default
            #line hidden
            
            #line 14 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Model.AssemblyInfo.UniqueProjectId.ToString().ToUpper() ));
            
            #line default
            #line hidden
            
            #line 14 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
            this.Write("}</ProjectGuid>\r\n    <OutputType>Library</OutputType>\r\n    <AppDesignerFolder>Pro" +
                    "perties</AppDesignerFolder>\r\n    <RootNamespace>");
            
            #line default
            #line hidden
            
            #line 17 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Model.AssemblyInfo.Name ));
            
            #line default
            #line hidden
            
            #line 17 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
            this.Write("</RootNamespace>\r\n    <AssemblyName>");
            
            #line default
            #line hidden
            
            #line 18 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Model.AssemblyInfo.Name ));
            
            #line default
            #line hidden
            
            #line 18 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
            this.Write(@"</AssemblyName>
    <TargetFrameworkVersion>v4.6.2</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
  </PropertyGroup>
  <PropertyGroup Condition="" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' "">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition="" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' "">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include=""System""/>
    <Reference Include=""System.Core""/>
    <Reference Include=""System.Drawing"" />
    <Reference Include=""System.Xml.Linq""/>
	<Reference Include=""System.Runtime.Serialization"" />
    <Reference Include=""System.ComponentModel.DataAnnotations"" />
    <Reference Include=""System.Data.DataSetExtensions""/>
    <Reference Include=""Microsoft.CSharp""/>
    <Reference Include=""System.Data""/>
    <Reference Include=""System.Net.Http""/>
    <Reference Include=""System.Xml""/>  
	</ItemGroup>
<ItemGroup>
");
            
            #line default
            #line hidden
            
            #line 53 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
 foreach(var reference in Model.AssemblyInfo.Packages) {
            
            #line default
            #line hidden
            
            #line 54 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
 foreach(var package in reference.IncludeHintPathTuples) {
            
            #line default
            #line hidden
            
            #line 55 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
            this.Write("\t<Reference Include=\"");
            
            #line default
            #line hidden
            
            #line 55 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( package.Item1 ));
            
            #line default
            #line hidden
            
            #line 55 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
            this.Write("\">\r\n");
            
            #line default
            #line hidden
            
            #line 56 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
 if(!string.IsNullOrEmpty(package.Item2)) { 
            
            #line default
            #line hidden
            
            #line 57 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
            this.Write("\t\t\t <HintPath>");
            
            #line default
            #line hidden
            
            #line 57 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( package.Item2 ));
            
            #line default
            #line hidden
            
            #line 57 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
            this.Write("</HintPath>\r\n");
            
            #line default
            #line hidden
            
            #line 58 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 59 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
            this.Write("    </Reference>\r\n");
            
            #line default
            #line hidden
            
            #line 60 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 61 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 62 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
            this.Write("  </ItemGroup>\r\n   <ItemGroup>\r\n");
            
            #line default
            #line hidden
            
            #line 64 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
 foreach(var file in Model.AssemblyInfo.FilesToCompile) {
            
            #line default
            #line hidden
            
            #line 65 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
            this.Write("\t\t<compile Include=\"");
            
            #line default
            #line hidden
            
            #line 65 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Path.Combine(file.GenerationInfo.RelativePathFolder.Substring(Model.AssemblyInfo.ProjectFileRelativePath.Length,file.GenerationInfo.RelativePathFolder.Length-Model.AssemblyInfo.ProjectFileRelativePath.Length).TrimStart('\\'), file.GenerationInfo.FileName)));
            
            #line default
            #line hidden
            
            #line 65 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
            this.Write("\"/>\r\n");
            
            #line default
            #line hidden
            
            #line 66 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
 }
            
            #line default
            #line hidden
            
            #line 67 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
            this.Write("  </ItemGroup>\r\n <ItemGroup>\r\n");
            
            #line default
            #line hidden
            
            #line 69 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
 foreach(var import in Model.AssemblyInfo.AssemblyImports) {
            
            #line default
            #line hidden
            
            #line 70 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
            this.Write("\t<ProjectReference Include=\"..\\\\");
            
            #line default
            #line hidden
            
            #line 70 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Path.Combine(import.AssemblyInfo.ProjectFileRelativePath, import.AssemblyInfo.Name) ));
            
            #line default
            #line hidden
            
            #line 70 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
            this.Write(".csproj\">\r\n      <Project>{");
            
            #line default
            #line hidden
            
            #line 71 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(  import.AssemblyInfo.UniqueProjectId.ToString().ToUpper() ));
            
            #line default
            #line hidden
            
            #line 71 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
            this.Write("}</Project>\r\n      <Name>");
            
            #line default
            #line hidden
            
            #line 72 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( import.AssemblyInfo.Name ));
            
            #line default
            #line hidden
            
            #line 72 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
            this.Write("</Name>\r\n    </ProjectReference>\r\n");
            
            #line default
            #line hidden
            
            #line 74 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 75 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
            this.Write("  </ItemGroup>\r\n<ItemGroup>\r\n");
            
            #line default
            #line hidden
            
            #line 77 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
 foreach(var include in Model.AssemblyInfo.IncludeOnlys) { 
            
            #line default
            #line hidden
            
            #line 78 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
            this.Write("    <Content Include=\"");
            
            #line default
            #line hidden
            
            #line 78 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( include ));
            
            #line default
            #line hidden
            
            #line 78 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
            this.Write("\" />\r\n");
            
            #line default
            #line hidden
            
            #line 79 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 80 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
 foreach(var content in Model.AssemblyInfo.Contents) { 
            
            #line default
            #line hidden
            
            #line 81 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
            this.Write("    <Content Include=\"..\\\\");
            
            #line default
            #line hidden
            
            #line 81 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( content.OutputPath ));
            
            #line default
            #line hidden
            
            #line 81 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
            this.Write("\">\r\n      <CopyToOutputDirectory>Always</CopyToOutputDirectory>\r\n    </Content>\r\n" +
                    "");
            
            #line default
            #line hidden
            
            #line 84 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 85 "Templates\SolutionTemplates\Assemblies\LibraryAssemblyTemplate.tt"
            this.Write(@"</ItemGroup>
  <Import Project=""$(MSBuildToolsPath)\Microsoft.CSharp.targets"" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name=""BeforeBuild"">
  </Target>
  <Target Name=""AfterBuild"">
  </Target>
  -->

 </Project>
");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
            if ((this.Errors.HasErrors == false)) {
                if (((this.Session != null) 
                            && this.Session.ContainsKey("Model"))) {
                    object data = this.Session["Model"];
                    if (typeof(CloudPrototyper.NET.Framework.v462.Common.Generators.SolutionGenerators.AssemblyFiles.LibraryAssemblyFileGenerator).IsAssignableFrom(data.GetType())) {
                        this._ModelField = ((CloudPrototyper.NET.Framework.v462.Common.Generators.SolutionGenerators.AssemblyFiles.LibraryAssemblyFileGenerator)(data));
                    }
                    else {
                        this.Error("The type \'CloudPrototyper.NET.Framework.v462.Common.Generators.SolutionGenerators" +
                                ".AssemblyFiles.LibraryAssemblyFileGenerator\' of the parameter \'Model\' did not ma" +
                                "tch the type passed to the template");
                    }
                }
            }

        }
    }
    
    public class LibraryAssemblyTemplateBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
