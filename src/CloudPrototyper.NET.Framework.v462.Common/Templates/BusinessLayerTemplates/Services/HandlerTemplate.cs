//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:5.0.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CloudPrototyper.NET.Framework.v462.Common.Templates.BusinessLayerTemplates.Services {
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    
    public partial class HandlerTemplate : HandlerTemplateBase {
        
        
        private CloudPrototyper.NET.Framework.v462.Common.Generators.BusinessLayerGenerators.Services.HandlerGenerator _ModelField;
        
        public CloudPrototyper.NET.Framework.v462.Common.Generators.BusinessLayerGenerators.Services.HandlerGenerator Model {
            get {
                return this._ModelField;
            }
        }

        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 7 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write("using Microsoft.Azure.ServiceBus;\r\nusing Newtonsoft.Json;\r\nusing System;\r\nusing S" +
                    "ystem.Diagnostics;\r\nusing System.IO;\r\nusing System.Threading;\r\nusing Castle.Wind" +
                    "sor;\r\nusing System.Collections.Generic;\r\n// Queue handler\r\nnamespace ");
            
            #line default
            #line hidden
            
            #line 16 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Model.Namespace ));
            
            #line default
            #line hidden
            
            #line 16 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write(" \r\n{\r\n    public class ");
            
            #line default
            #line hidden
            
            #line 18 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Model.Name ));
            
            #line default
            #line hidden
            
            #line 18 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write(" : ");
            
            #line default
            #line hidden
            
            #line 18 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Model.MessageBusHandlerInterface.Namespace ));
            
            #line default
            #line hidden
            
            #line 18 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write(".");
            
            #line default
            #line hidden
            
            #line 18 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Model.MessageBusHandlerInterface.Name ));
            
            #line default
            #line hidden
            
            #line 18 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write("\r\n\t{\r\n        private string connectionString;\r\n        private string queueName;" +
                    "\r\n\t\tpublic const string Name = \"");
            
            #line default
            #line hidden
            
            #line 22 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Model.Name ));
            
            #line default
            #line hidden
            
            #line 22 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write("\";\r\n        private QueueClient _client;\r\n        private ManualResetEvent comple" +
                    "tedEvent = new ManualResetEvent(false);\r\n\r\n");
            
            #line default
            #line hidden
            
            #line 26 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
 foreach(var action in Model.Actions) { 
            
            #line default
            #line hidden
            
            #line 27 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write("\t\tpublic ");
            
            #line default
            #line hidden
            
            #line 27 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( action.Namespace ));
            
            #line default
            #line hidden
            
            #line 27 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write(".");
            
            #line default
            #line hidden
            
            #line 27 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( action.Name ));
            
            #line default
            #line hidden
            
            #line 27 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write(" ");
            
            #line default
            #line hidden
            
            #line 27 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( action.Name ));
            
            #line default
            #line hidden
            
            #line 27 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write(" { get; set; }\r\n");
            
            #line default
            #line hidden
            
            #line 28 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 29 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write("\t\tpublic ");
            
            #line default
            #line hidden
            
            #line 29 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Model.Name ));
            
            #line default
            #line hidden
            
            #line 29 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write("(\r\n");
            
            #line default
            #line hidden
            
            #line 30 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
 foreach(var action in Model.Actions) {  if(Model.Actions.Last().Equals(action)) {
            
            #line default
            #line hidden
            
            #line 31 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write("\t\t");
            
            #line default
            #line hidden
            
            #line 31 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( action.Namespace ));
            
            #line default
            #line hidden
            
            #line 31 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write(".");
            
            #line default
            #line hidden
            
            #line 31 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( action.Name ));
            
            #line default
            #line hidden
            
            #line 31 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write(" ");
            
            #line default
            #line hidden
            
            #line 31 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( action.Name.ToLower() ));
            
            #line default
            #line hidden
            
            #line 31 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write("\r\n");
            
            #line default
            #line hidden
            
            #line 32 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            
            #line 33 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write("\t\t");
            
            #line default
            #line hidden
            
            #line 33 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( action.Namespace ));
            
            #line default
            #line hidden
            
            #line 33 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write(".");
            
            #line default
            #line hidden
            
            #line 33 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( action.Name ));
            
            #line default
            #line hidden
            
            #line 33 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write(" ");
            
            #line default
            #line hidden
            
            #line 33 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( action.Name.ToLower() ));
            
            #line default
            #line hidden
            
            #line 33 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write(",\r\n");
            
            #line default
            #line hidden
            
            #line 34 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
 }} 
            
            #line default
            #line hidden
            
            #line 35 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write("\t\t) \r\n\t\t{\r\n");
            
            #line default
            #line hidden
            
            #line 37 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
 foreach(var action in Model.Actions) { 
            
            #line default
            #line hidden
            
            #line 38 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write("\t\t\tthis.");
            
            #line default
            #line hidden
            
            #line 38 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( action.Name ));
            
            #line default
            #line hidden
            
            #line 38 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write(" = ");
            
            #line default
            #line hidden
            
            #line 38 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( action.Name.ToLower() ));
            
            #line default
            #line hidden
            
            #line 38 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write(";\r\n");
            
            #line default
            #line hidden
            
            #line 39 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 40 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write("            this.connectionString = \"");
            
            #line default
            #line hidden
            
            #line 40 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Model.AzureServiceBusQueue.ConnectionString ));
            
            #line default
            #line hidden
            
            #line 40 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write("\";\r\n            this.queueName = \"");
            
            #line default
            #line hidden
            
            #line 41 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Model.AzureServiceBusQueue.Name ));
            
            #line default
            #line hidden
            
            #line 41 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write(@""";
        }

        public void OnStart()
        {
        
            // Initialize the connection to Service Bus Queue
            _client = new QueueClient(new ServiceBusConnectionStringBuilder(connectionString), ReceiveMode.ReceiveAndDelete, new RetryExponential(TimeSpan.FromSeconds(0.3), TimeSpan.FromSeconds(2), 5));
            //Client.PrefetchCount = 4;
        }

        public void Run()
        {
            Trace.WriteLine(""Starting processing of messages"");

            // Initiates the message pump and callback is invoked for each message that is received, calling close on the client will stop the pump.
            _client.RegisterMessageHandler((receivedMessage, token) =>
            {
                // Get DateTime when task processing began
                DateTime startedAt = DateTime.Now;

                try
                {

                    using (StreamReader sr = new StreamReader(new MemoryStream(receivedMessage.Body)))
                    {
                        using (JsonTextReader jr = new JsonTextReader(sr))
                        {

                            JsonSerializer serializer = new JsonSerializer();
                            var messageBody = serializer.Deserialize(jr);
");
            
            #line default
            #line hidden
            
            #line 72 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
 foreach(var action in Model.ModelParameters) { 
            
            #line default
            #line hidden
            
            #line 73 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write("\t\t\t                if(receivedMessage.Label == \"");
            
            #line default
            #line hidden
            
            #line 73 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( (action.Trigger as CloudPrototyper.Model.Applications.MessageReceivedTrigger).MessageType ));
            
            #line default
            #line hidden
            
            #line 73 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write("\")\r\n\t\t\t                {\r\n\t\t\t\t                 ");
            
            #line default
            #line hidden
            
            #line 75 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Model.Actions.FirstOrDefault(x=>x.Key.Equals(action.Name)).Name ));
            
            #line default
            #line hidden
            
            #line 75 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write(".Execute(new List<string>());\r\n\t\t\t                } \r\n\r\n");
            
            #line default
            #line hidden
            
            #line 78 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 79 "Templates\BusinessLayerTemplates\Services\HandlerTemplate.tt"
            this.Write(@"							Trace.WriteLine(""Processing of message completed "" + receivedMessage.Label);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Trace.WriteLine(""Failed processing of message "" + receivedMessage.Label);
                }
                return System.Threading.Tasks.Task.CompletedTask;
            }, new MessageHandlerOptions((args) => System.Threading.Tasks.Task.CompletedTask) { MaxConcurrentCalls = 1 });

            completedEvent.WaitOne();
        }
    }
}
");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
            if ((this.Errors.HasErrors == false)) {
                if (((this.Session != null) 
                            && this.Session.ContainsKey("Model"))) {
                    object data = this.Session["Model"];
                    if (typeof(CloudPrototyper.NET.Framework.v462.Common.Generators.BusinessLayerGenerators.Services.HandlerGenerator).IsAssignableFrom(data.GetType())) {
                        this._ModelField = ((CloudPrototyper.NET.Framework.v462.Common.Generators.BusinessLayerGenerators.Services.HandlerGenerator)(data));
                    }
                    else {
                        this.Error("The type \'CloudPrototyper.NET.Framework.v462.Common.Generators.BusinessLayerGener" +
                                "ators.Services.HandlerGenerator\' of the parameter \'Model\' did not match the type" +
                                " passed to the template");
                    }
                }
            }

        }
    }
    
    public class HandlerTemplateBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
