<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter type="CloudPrototyper.NET.Framework.v462.Common.Generators.DataLayerGenerators.AzureMessageQueue.AzureServiceBusQueueGenerator" name="Model" #>
using System;
using System.Collections.Generic;
using System.IO;
using Newtonsoft.Json;
using Microsoft.Azure.ServiceBus;
// Azure service bus
namespace <#= Model.Namespace #> 
{
    public class <#= Model.Name #> : <#= Model.MessageBusInterfaceGenerator.Namespace #>.<#= Model.MessageBusInterfaceGenerator.Name #>
    {
		private readonly Dictionary<string, Type> _names = new Dictionary<string, Type>();
		private static readonly QueueClient _client = new QueueClient(new ServiceBusConnectionStringBuilder("<#= Model.ModelParameters.ConnectionString #>"));
		public const string Name = "<#= Model.ModelParameters.Name #>";

		public void Insert(string name) 
		{
			object toInsert = null;
<# foreach(var entity in Model.Entities) { #>
			if(name == "<#= entity.Name #>")
			{
				toInsert = <#=Model.DataGenerator.Namespace#>.<#= Model.DataGenerator.Name #>.GetInstance().Generate<<#=entity.Namespace#>.<#= entity.Name #>>(1).ToArray()[0];
			} 
<# } #>
			Insert(name,toInsert);
		}

		public void Insert(string name, object toInsert) 
		{
			using (var jsonStream = new MemoryStream())
            {
                JsonSerializer serializer = new JsonSerializer();
                using (StreamWriter sw = new StreamWriter(jsonStream))
                {
                    using (JsonTextWriter writer = new JsonTextWriter(sw))
                    {
                        serializer.Serialize(writer, name);
                        sw.Flush();
                        jsonStream.Seek(0, SeekOrigin.Begin);

                        var message = new Message(jsonStream.ToArray()) { Label = name };

                        _client.SendAsync(message).Wait();
                    }
                }
            }
		}

		public void InsertAll(string name, object[] toInsert) 
		{
			foreach(var o in toInsert) 
			{
				Insert(name, o);				
			}
		}
    }
}