<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter type="CloudPrototyper.NET.Framework.v462.EventHub.Generators.AzureEventHubGenerator" name="Model" #>
using System.Collections.Generic;
using Newtonsoft.Json;
using Azure.Messaging.EventHubs;
using Azure.Messaging.EventHubs.Producer;
// Azure service bus
namespace <#= Model.Namespace #> 
{
    public class <#= Model.Name #> : <#= Model.MessageBusInterfaceGenerator.Namespace #>.<#= Model.MessageBusInterfaceGenerator.Name #>
    {
		private readonly EventHubProducerClient _client; 
		public const string Name = "<#= Model.ModelParameters.Name #>";

		public <#= Model.Name #>() 
		{ 
			_client = new EventHubProducerClient("<#= Model.ModelParameters.ConnectionString #>", Name);
		}

		public void Insert(string name) 
		{
			object toInsert = null;
<# foreach(var entity in Model.Entities) { #>
			if(name == "<#= entity.Name #>")
			{
				toInsert = <#=Model.DataGenerator.Namespace#>.<#= Model.DataGenerator.Name #>.GetInstance().Generate<<#=entity.Namespace#>.<#= entity.Name #>>(1).ToArray()[0];
			} 
<# } #>
			Insert(name,toInsert);
		}

		public void Insert(string name, object toInsert) 
		{
			var obj = JsonConvert.SerializeObject(toInsert);
			EventData data = new EventData(obj);
            data.Properties.Add(new KeyValuePair<string, object>("Label", name));

            var batchTask = _client.CreateBatchAsync().AsTask();
            batchTask.Wait();
            var batch = batchTask.Result;

            batch.TryAdd(data);
            _client.SendAsync(batch).Wait();
		}

		public void InsertAll(string name, object[] toInsert) 
		{
			foreach(var o in toInsert) 
			{
				Insert(name, o);				
			}
		}
    }
}