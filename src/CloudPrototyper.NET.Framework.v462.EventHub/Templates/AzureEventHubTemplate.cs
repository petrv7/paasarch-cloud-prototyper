//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:5.0.10
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CloudPrototyper.NET.Framework.v462.EventHub.Templates {
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    
    public partial class AzureEventHubTemplate : AzureEventHubTemplateBase {
        
        
        private CloudPrototyper.NET.Framework.v462.EventHub.Generators.AzureEventHubGenerator _ModelField;
        
        public CloudPrototyper.NET.Framework.v462.EventHub.Generators.AzureEventHubGenerator Model {
            get {
                return this._ModelField;
            }
        }

        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 7 "Templates\AzureEventHubTemplate.tt"
            this.Write("using Newtonsoft.Json;\r\nusing Azure.Messaging.EventHubs;\r\nusing Azure.Messaging.E" +
                    "ventHubs.Producer;\r\n// Azure service bus\r\nnamespace ");
            
            #line default
            #line hidden
            
            #line 11 "Templates\AzureEventHubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Model.Namespace ));
            
            #line default
            #line hidden
            
            #line 11 "Templates\AzureEventHubTemplate.tt"
            this.Write(" \r\n{\r\n    public class ");
            
            #line default
            #line hidden
            
            #line 13 "Templates\AzureEventHubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Model.Name ));
            
            #line default
            #line hidden
            
            #line 13 "Templates\AzureEventHubTemplate.tt"
            this.Write(" : ");
            
            #line default
            #line hidden
            
            #line 13 "Templates\AzureEventHubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Model.MessageBusInterfaceGenerator.Namespace ));
            
            #line default
            #line hidden
            
            #line 13 "Templates\AzureEventHubTemplate.tt"
            this.Write(".");
            
            #line default
            #line hidden
            
            #line 13 "Templates\AzureEventHubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Model.MessageBusInterfaceGenerator.Name ));
            
            #line default
            #line hidden
            
            #line 13 "Templates\AzureEventHubTemplate.tt"
            this.Write("\r\n    {\r\n\t\tprivate readonly EventHubProducerClient _client; \r\n\t\tpublic const stri" +
                    "ng Name = \"");
            
            #line default
            #line hidden
            
            #line 16 "Templates\AzureEventHubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Model.ModelParameters.Name ));
            
            #line default
            #line hidden
            
            #line 16 "Templates\AzureEventHubTemplate.tt"
            this.Write("\";\r\n\r\n\t\tpublic ");
            
            #line default
            #line hidden
            
            #line 18 "Templates\AzureEventHubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Model.Name ));
            
            #line default
            #line hidden
            
            #line 18 "Templates\AzureEventHubTemplate.tt"
            this.Write("() \r\n\t\t{ \r\n\t\t\t_client = new EventHubProducerClient(\"");
            
            #line default
            #line hidden
            
            #line 20 "Templates\AzureEventHubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Model.ModelParameters.ConnectionString ));
            
            #line default
            #line hidden
            
            #line 20 "Templates\AzureEventHubTemplate.tt"
            this.Write("\", Name);\r\n\t\t}\r\n\r\n\t\tpublic void Insert(string name) \r\n\t\t{\r\n\t\t\tobject toInsert = n" +
                    "ull;\r\n");
            
            #line default
            #line hidden
            
            #line 26 "Templates\AzureEventHubTemplate.tt"
 foreach(var entity in Model.Entities) { 
            
            #line default
            #line hidden
            
            #line 27 "Templates\AzureEventHubTemplate.tt"
            this.Write("\t\t\tif(name == \"");
            
            #line default
            #line hidden
            
            #line 27 "Templates\AzureEventHubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( entity.Name ));
            
            #line default
            #line hidden
            
            #line 27 "Templates\AzureEventHubTemplate.tt"
            this.Write("\")\r\n\t\t\t{\r\n\t\t\t\ttoInsert = ");
            
            #line default
            #line hidden
            
            #line 29 "Templates\AzureEventHubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.DataGenerator.Namespace));
            
            #line default
            #line hidden
            
            #line 29 "Templates\AzureEventHubTemplate.tt"
            this.Write(".");
            
            #line default
            #line hidden
            
            #line 29 "Templates\AzureEventHubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Model.DataGenerator.Name ));
            
            #line default
            #line hidden
            
            #line 29 "Templates\AzureEventHubTemplate.tt"
            this.Write(".GetInstance().Generate<");
            
            #line default
            #line hidden
            
            #line 29 "Templates\AzureEventHubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.Namespace));
            
            #line default
            #line hidden
            
            #line 29 "Templates\AzureEventHubTemplate.tt"
            this.Write(".");
            
            #line default
            #line hidden
            
            #line 29 "Templates\AzureEventHubTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( entity.Name ));
            
            #line default
            #line hidden
            
            #line 29 "Templates\AzureEventHubTemplate.tt"
            this.Write(">(1).ToArray()[0];\r\n\t\t\t} \r\n");
            
            #line default
            #line hidden
            
            #line 31 "Templates\AzureEventHubTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 32 "Templates\AzureEventHubTemplate.tt"
            this.Write(@"			Insert(name,toInsert);
		}

		public void Insert(string name, object toInsert) 
		{
			var json = JsonConvert.SerializeObject(toInsert);
			var data = new EventData(json);
			data.Properties.Add(""MsgType"", name);

            var batchTask = _client.CreateBatchAsync().AsTask();
            batchTask.Wait();
            var batch = batchTask.Result;

            batch.TryAdd(data);
            _client.SendAsync(batch).Wait();
		}

		public void InsertAll(string name, object[] toInsert) 
		{
			foreach(var o in toInsert) 
			{
				Insert(name, o);				
			}
		}
    }
}");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
            if ((this.Errors.HasErrors == false)) {
                if (((this.Session != null) 
                            && this.Session.ContainsKey("Model"))) {
                    object data = this.Session["Model"];
                    if (typeof(CloudPrototyper.NET.Framework.v462.EventHub.Generators.AzureEventHubGenerator).IsAssignableFrom(data.GetType())) {
                        this._ModelField = ((CloudPrototyper.NET.Framework.v462.EventHub.Generators.AzureEventHubGenerator)(data));
                    }
                    else {
                        this.Error("The type \'CloudPrototyper.NET.Framework.v462.EventHub.Generators.AzureEventHubGen" +
                                "erator\' of the parameter \'Model\' did not match the type passed to the template");
                    }
                }
            }

        }
    }
    
    public class AzureEventHubTemplateBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
