<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter type="CloudPrototyper.NET.v6.Functions.Generators.StartupGenerator" name="Model" #>
using Microsoft.Azure.Functions.Extensions.DependencyInjection;
using Microsoft.Extensions.DependencyInjection;
using System.Linq;
using System.Reflection;

[assembly: FunctionsStartup(typeof(<#= Model.Namespace #> .Startup))]


namespace <#= Model.Namespace #> 
{
    public class Startup : FunctionsStartup
    {
        public override void Configure(IFunctionsHostBuilder builder)
        {
            var opAssembly = typeof(<#= Model.OperationInterface.Namespace #>.<#= Model.OperationInterface.Name #>).Assembly;
            var actionAssembly = typeof(<#= Model.ActionBase.Namespace #>.<#= Model.ActionBase.Name #>).Assembly;
            var busAssembly = typeof(<#= Model.MessageBusInterface.Namespace #>.<#= Model.MessageBusInterface.Name #>).Assembly;
            var storageAssembly = typeof(<#= Model.StorageInterface.Namespace #>.<#= Model.StorageInterface.Name #>).Assembly;
            var assemblies = new Assembly[] {opAssembly, actionAssembly, busAssembly, storageAssembly};
            var types = assemblies.SelectMany(a => a.GetTypes()).Where(t => !t.IsAbstract && !t.IsInterface).ToList();
            
            foreach (var type in types.Where(t => typeof(<#= Model.OperationInterface.Namespace #>.<#= Model.OperationInterface.Name #>).IsAssignableFrom(t)))
            {
                builder.Services.AddTransient(type, type);
            }
            foreach (var type in types.Where(t => typeof(<#= Model.ActionBase.Namespace #>.<#= Model.ActionBase.Name #>).IsAssignableFrom(t)))
            {
                builder.Services.AddTransient(type, type);
            }
            foreach (var type in types.Where(t => typeof(<#= Model.MessageBusInterface.Namespace #>.<#= Model.MessageBusInterface.Name #>).IsAssignableFrom(t)))
            {
                builder.Services.AddTransient(type, type);
            }
            foreach (var type in types.Where(t => typeof(<#= Model.StorageInterface.Namespace #>.<#= Model.StorageInterface.Name #>).IsAssignableFrom(t)))
            {
                builder.Services.AddTransient(type, type);
            }           
        }
    }
}
