//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CloudPrototyper.NET.Framework.v462.TblStorage.Templates {
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    
    public partial class AzureTableStorageContextTemplate : AzureTableStorageContextTemplateBase {
        
        
        private CloudPrototyper.NET.Framework.v462.TblStorage.Generators.AzureTableStorageContextGenerator _ModelField;
        
        public CloudPrototyper.NET.Framework.v462.TblStorage.Generators.AzureTableStorageContextGenerator Model {
            get {
                return this._ModelField;
            }
        }

        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 7 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write("using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing Micro" +
                    "soft.WindowsAzure.Storage;\r\nusing Microsoft.WindowsAzure.Storage.Table;\r\nusing M" +
                    "icrosoft.WindowsAzure.Storage.Table.Protocol;\r\n//Azure table storage\r\nnamespace " +
                    "");
            
            #line default
            #line hidden
            
            #line 14 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Model.Namespace ));
            
            #line default
            #line hidden
            
            #line 14 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write(" \r\n{\r\n    public class ");
            
            #line default
            #line hidden
            
            #line 16 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Model.Name ));
            
            #line default
            #line hidden
            
            #line 16 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write(" : ");
            
            #line default
            #line hidden
            
            #line 16 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Model.StorageInterface.Namespace ));
            
            #line default
            #line hidden
            
            #line 16 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write(".");
            
            #line default
            #line hidden
            
            #line 16 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Model.StorageInterface.Name ));
            
            #line default
            #line hidden
            
            #line 16 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write("\r\n    {\r\n\t\tprivate readonly Dictionary<string, Tuple<Type,int>> _names = new Dict" +
                    "ionary<string, Tuple<Type,int>>();\r\n\t\tprivate readonly CloudStorageAccount _stor" +
                    "ageAccount = CloudStorageAccount.Parse(\"");
            
            #line default
            #line hidden
            
            #line 19 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Model.ModelParameters.ConnectionString ));
            
            #line default
            #line hidden
            
            #line 19 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write("\");\r\n\t\tprivate readonly CloudTableClient _tableClient;\r\n\t\tpublic const string Nam" +
                    "e = \"");
            
            #line default
            #line hidden
            
            #line 21 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Model.ModelParameters.Name ));
            
            #line default
            #line hidden
            
            #line 21 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write("\";\r\n\t\tpublic ");
            
            #line default
            #line hidden
            
            #line 22 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Model.Name ));
            
            #line default
            #line hidden
            
            #line 22 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write("() \r\n\t\t{ \r\n\t\t\tInitDictionary();\r\n\t\t\t_tableClient = _storageAccount.CreateCloudTab" +
                    "leClient();\r\n\t\t}\r\n\t\t\r\n        public string GetName()\r\n        {\r\n            re" +
                    "turn \"");
            
            #line default
            #line hidden
            
            #line 30 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Model.Key ));
            
            #line default
            #line hidden
            
            #line 30 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write("\";\r\n        }\r\n\t\t\r\n\t\tpublic List<object> GetEntities(string entitySetName, string" +
                    " entityName, ");
            
            #line default
            #line hidden
            
            #line 33 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Model.Query.Namespace ));
            
            #line default
            #line hidden
            
            #line 33 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write(".");
            
            #line default
            #line hidden
            
            #line 33 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Model.Query.Name ));
            
            #line default
            #line hidden
            
            #line 33 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write(" query)\r\n\t\t{\r\n");
            
            #line default
            #line hidden
            
            #line 35 "Templates\AzureTableStorageContextTemplate.tt"
 foreach(var entitySet in Model.ModelParameters.EntitySets) { 
            
            #line default
            #line hidden
            
            #line 36 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write("\t\t\tif(entitySetName == \"");
            
            #line default
            #line hidden
            
            #line 36 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( entitySet.Name ));
            
            #line default
            #line hidden
            
            #line 36 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write("\")\r\n\t\t\t{\r\n\t\t\t\tCloudTable table = _tableClient.GetTableReference(entitySetName);\r\n" +
                    "\t\t\t\tTableQuery<");
            
            #line default
            #line hidden
            
            #line 39 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Model.Entities.Single(x=>x.Key == entitySet.EntityName).Namespace ));
            
            #line default
            #line hidden
            
            #line 39 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write(".");
            
            #line default
            #line hidden
            
            #line 39 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Model.Entities.Single(x=>x.Key == entitySet.EntityName).Name ));
            
            #line default
            #line hidden
            
            #line 39 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write("> tableQuery = new TableQuery<");
            
            #line default
            #line hidden
            
            #line 39 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Model.Entities.Single(x=>x.Key == entitySet.EntityName).Namespace ));
            
            #line default
            #line hidden
            
            #line 39 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write(".");
            
            #line default
            #line hidden
            
            #line 39 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Model.Entities.Single(x=>x.Key == entitySet.EntityName).Name ));
            
            #line default
            #line hidden
            
            #line 39 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write(">();\r\n                if (query.IsNominal)\r\n                {\r\n                  " +
                    "  if (query.PropertyName == \"Id\")\r\n                    {\r\n                      " +
                    "  var qId = tableQuery.Where(\r\n                        TableQuery.CombineFilters" +
                    "(\r\n                        TableQuery.GenerateFilterCondition(\"PartitionKey\", Qu" +
                    "eryComparisons.Equal, \"p\"),\r\n                        TableOperators.And,\r\n      " +
                    "                  TableQuery.GenerateFilterCondition(\"RowKey\", QueryComparisons." +
                    "Equal, query.NominalParameter.PadLeft(9, \'0\'))));\r\n\t\t\t\t\t\t\r\n                     " +
                    "   return ExecuteQuery(table, qId);\r\n                    }\r\n\r\n                  " +
                    "  var q = tableQuery.Where(TableQuery.GenerateFilterCondition(query.PropertyName" +
                    ", QueryComparisons.Equal, query.NominalParameter));\t\t\t\t\t\r\n                    re" +
                    "turn ExecuteQuery(table, q);\r\n                }\r\n\t\t\t\tif (query.PropertyName == \"" +
                    "Id\")\r\n                {\r\n                    var qId = tableQuery.Where(\r\n      " +
                    "                  TableQuery.CombineFilters(\r\n                            TableQ" +
                    "uery.GenerateFilterCondition(\"PartitionKey\", QueryComparisons.Equal, \"p\"),\r\n    " +
                    "                        TableOperators.And,\r\n                            TableQu" +
                    "ery.CombineFilters(\r\n                                TableQuery.GenerateFilterCo" +
                    "ndition(\"RowKey\", QueryComparisons.GreaterThanOrEqual, query.MinValue.PadLeft(9," +
                    " \'0\')), \r\n                                TableOperators.And, \r\n                " +
                    "                TableQuery.GenerateFilterCondition(\"RowKey\", QueryComparisons.Le" +
                    "ssThanOrEqual, query.MaxValue.PadLeft(9, \'0\')\r\n                                )" +
                    "\r\n                        )));\r\n                    return ExecuteQuery(table, q" +
                    "Id);\r\n                }\r\n\r\n                var queryRange = tableQuery.Where(\r\n " +
                    "                   TableQuery.CombineFilters(\r\n                        TableQuer" +
                    "y.GenerateFilterCondition(query.PropertyName, QueryComparisons.GreaterThanOrEqua" +
                    "l, query.MinValue),\r\n                        TableOperators.And,\r\n              " +
                    "          TableQuery.GenerateFilterCondition(query.PropertyName, QueryComparison" +
                    "s.LessThanOrEqual, query.MaxValue)));\r\n                return ExecuteQuery(table" +
                    ", queryRange);\r\n\t\t\t} \r\n");
            
            #line default
            #line hidden
            
            #line 78 "Templates\AzureTableStorageContextTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 79 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write(@"			
			return new List<object>();
		}


		public void InsertAll(string entitySetName, string entityName, object[] toInsert)
		{
		    CloudTable table = _tableClient.GetTableReference(entitySetName);
		    table.CreateIfNotExistsAsync().Wait();
		    TableBatchOperation batchOperation = new TableBatchOperation();
			int count = 0;
            int totalSize = 0;
            int size = 0;

");
            
            #line default
            #line hidden
            
            #line 93 "Templates\AzureTableStorageContextTemplate.tt"
 foreach(var entity in Model.Entities) { 
            
            #line default
            #line hidden
            
            #line 94 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write("\t\t\tif(entityName == \"");
            
            #line default
            #line hidden
            
            #line 94 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( entity.Name ));
            
            #line default
            #line hidden
            
            #line 94 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write("\")\r\n\t\t\t{\r\n\t\t\t\tsize = ");
            
            #line default
            #line hidden
            
            #line 96 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.Namespace));
            
            #line default
            #line hidden
            
            #line 96 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write(".");
            
            #line default
            #line hidden
            
            #line 96 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( entity.Name ));
            
            #line default
            #line hidden
            
            #line 96 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write(".GetTotalContentSize();\r\n      \t\t} \r\n");
            
            #line default
            #line hidden
            
            #line 98 "Templates\AzureTableStorageContextTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 99 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write(@"
		    foreach (var obj in toInsert)
		    {
		        count++;
                totalSize += size;

		        if (count >= 100 || totalSize + size >= 4000000)
		        {
		            table.ExecuteBatchAsync(batchOperation).Wait();
		            batchOperation = new TableBatchOperation();
		            count = 0;
                    totalSize = 0;
		        }
		        batchOperation.InsertOrReplace(obj as TableEntity);
            }
		    table.ExecuteBatchAsync(batchOperation).Wait();
		}

		public void Insert(string entitySetName,string entityName, int count)
		{
			object[] generated = null;
");
            
            #line default
            #line hidden
            
            #line 120 "Templates\AzureTableStorageContextTemplate.tt"
 foreach(var entity in Model.Entities) { 
            
            #line default
            #line hidden
            
            #line 121 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write("\t\t\tif(entityName == \"");
            
            #line default
            #line hidden
            
            #line 121 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( entity.Name ));
            
            #line default
            #line hidden
            
            #line 121 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write("\")\r\n\t\t\t{\r\n\t\t\t\tgenerated = ");
            
            #line default
            #line hidden
            
            #line 123 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.DataGenerator.Namespace));
            
            #line default
            #line hidden
            
            #line 123 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write(".");
            
            #line default
            #line hidden
            
            #line 123 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Model.DataGenerator.Name ));
            
            #line default
            #line hidden
            
            #line 123 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write(".GetInstance().Generate<");
            
            #line default
            #line hidden
            
            #line 123 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.Namespace));
            
            #line default
            #line hidden
            
            #line 123 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write(".");
            
            #line default
            #line hidden
            
            #line 123 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( entity.Name ));
            
            #line default
            #line hidden
            
            #line 123 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write(">(count).ToArray();\r\n\r\n\t\t\t} \r\n");
            
            #line default
            #line hidden
            
            #line 126 "Templates\AzureTableStorageContextTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 127 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write("\t\t\tInsertAll(entitySetName,entityName,generated);\r\n\r\n\t\t}\r\n\r\n\t\tprivate void InitDi" +
                    "ctionary()\r\n        {\r\n");
            
            #line default
            #line hidden
            
            #line 133 "Templates\AzureTableStorageContextTemplate.tt"
 foreach(var set in Model.ModelParameters.EntitySets) { 
            
            #line default
            #line hidden
            
            #line 134 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write("\t\t\t_names.Add(\"");
            
            #line default
            #line hidden
            
            #line 134 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( set.Name ));
            
            #line default
            #line hidden
            
            #line 134 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write("\", new Tuple<Type,int>(typeof(");
            
            #line default
            #line hidden
            
            #line 134 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Model.Entities.Single(x=>x.Name == set.EntityName).Namespace ));
            
            #line default
            #line hidden
            
            #line 134 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write(".");
            
            #line default
            #line hidden
            
            #line 134 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(  Model.Entities.Single(x=>x.Name == set.EntityName).Name ));
            
            #line default
            #line hidden
            
            #line 134 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write("),");
            
            #line default
            #line hidden
            
            #line 134 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(set.Count));
            
            #line default
            #line hidden
            
            #line 134 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write("));\r\n");
            
            #line default
            #line hidden
            
            #line 135 "Templates\AzureTableStorageContextTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 136 "Templates\AzureTableStorageContextTemplate.tt"
            this.Write(@"        }

		private static List<object> ExecuteQuery<T>(CloudTable table, TableQuery<T> query) where T : TableEntity, new()
        {

            var items = new List<object>();
            TableContinuationToken token = null;

            do
            {

                var task = table.ExecuteQuerySegmentedAsync(query, token);
                task.Wait();
                var seg = task.Result;

                token = seg.ContinuationToken;
                items.AddRange(seg.ToList());

            } while (token != null);

            return items;
        }

    }
}");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
            if ((this.Errors.HasErrors == false)) {
                if (((this.Session != null) 
                            && this.Session.ContainsKey("Model"))) {
                    object data = this.Session["Model"];
                    if (typeof(CloudPrototyper.NET.Framework.v462.TblStorage.Generators.AzureTableStorageContextGenerator).IsAssignableFrom(data.GetType())) {
                        this._ModelField = ((CloudPrototyper.NET.Framework.v462.TblStorage.Generators.AzureTableStorageContextGenerator)(data));
                    }
                    else {
                        this.Error("The type \'CloudPrototyper.NET.Framework.v462.TblStorage.Generators.AzureTableStor" +
                                "ageContextGenerator\' of the parameter \'Model\' did not match the type passed to t" +
                                "he template");
                    }
                }
            }

        }
    }
    
    public class AzureTableStorageContextTemplateBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
