<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter type="CloudPrototyper.NET.Core.v31.Functions.Generators.StartupGenerator" name="Model" #>
using Castle.Windsor;
using Castle.MicroKernel.Registration;
using Castle.Windsor.MsDependencyInjection;
using Microsoft.Azure.Functions.Extensions.DependencyInjection;
using Microsoft.Azure.WebJobs.Host;
using Microsoft.Extensions.DependencyInjection;
using System.Reflection;
using System.Linq;
using Microsoft.Azure.WebJobs;

[assembly: FunctionsStartup(typeof(<#= Model.Namespace #> .Startup))]


namespace <#= Model.Namespace #> 
{
    public class Startup : FunctionsStartup
    {
        public override void Configure(IFunctionsHostBuilder builder)
        {
            var container = new WindsorContainer();
            container.Register(
                Classes.FromAssemblyContaining<<#= Model.OperationInterface.Namespace #>.<#= Model.OperationInterface.Name #>>()
                    .BasedOn<<#= Model.OperationInterface.Namespace #>.<#= Model.OperationInterface.Name #>>()
                    .LifestyleTransient(),
                Classes.FromAssemblyContaining<<#= Model.ActionBase.Namespace #>.<#= Model.ActionBase.Name #>>()
                    .BasedOn<<#= Model.ActionBase.Namespace #>.<#= Model.ActionBase.Name #>>()
                    .WithService.AllInterfaces()
                    .LifestyleTransient(),
                Classes.FromAssemblyContaining<<#= Model.MessageBusInterface.Namespace #>.<#= Model.MessageBusInterface.Name #>>()
                    .BasedOn<<#= Model.MessageBusInterface.Namespace #>.<#= Model.MessageBusInterface.Name #>>()
                    .LifestyleTransient(),
                Classes.FromAssemblyContaining<<#= Model.StorageInterface.Namespace #>.<#= Model.StorageInterface.Name #>>()
                    .BasedOn<<#= Model.StorageInterface.Namespace #>.<#= Model.StorageInterface.Name #>>()
                    .LifestyleTransient()
                );

            var functions = Assembly.GetExecutingAssembly().GetTypes().Where(t =>
                t.GetMethods().Any(m => m.GetCustomAttributes(typeof(FunctionNameAttribute), false).Any()));

            foreach (var function in functions)
            {
                container.Register(Component.For(function).LifestyleTransient());
            }

            builder.Services.AddScoped<CastleWindsorJobActivator.ScopeDisposable>()
                .AddSingleton<IJobActivator>(new CastleWindsorJobActivator(container));

            container.AddServices(builder.Services);
        }
    }
}
